{"version":3,"sources":["next.mp3","TicketList3.jsx","FoodIcon.js","NextCustomerPage.jsx","CreateTicketForm2.jsx","ServingCustomerPage.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","styles","container","padding","title","textAlign","buttonsTopLeft","position","top","left","TicketList3","_useState","useState","_useState2","_slicedToArray","tickets","setTickets","_useState3","_useState4","sorting","setSorting","_useState5","timestamp","Date","getTime","randomPart","Math","random","toString","substr","x","concat","console","log","generateUniqueSessionId","_useState6","sessionId","_useState7","_useState8","showDoneItems","setShowDoneItems","isToastVisibleRef","useRef","useEffect","currentTime","fetch","window","location","hostname","then","response","json","data","catch","error","eventSource","EventSource","addEventListener","event","updateInfo","current","toastId","toast","autoClose","closeOnClick","pauseOnHover","draggable","progress","undefined","onClick","reload","onChange","isActive","showUpdatedDBToast","JSON","parse","close","handleFieldChange","ticketId","field","value","prevTickets","map","ticket","id","_objectSpread","_defineProperty","sortTickets","columnKey","order","sortedTickets","_toConsumableArray","sort","a","b","aValue","bValue","localeCompare","columns","dataIndex","key","onHeaderCell","render","text","record","React","createElement","Input","firstName","e","target","lastName","Checkbox","checked","scheduleAppointment","firstTimeVisitor","getDateInPacTime","time","scheduleAppointmentTime","type","positionInLine","parseInt","sortTicketsByPosition","additionalNotes","style","width","minHeight","Button","ticketToToggle","find","updatedDoneValue","done","method","headers","Content-Type","X-Session-Id","body","stringify","ok","message","success","handleToggleDoneClick","backgroundColor","color","ticketToSave","handleSaveClick","filter","statusText","newDate","pacificDateTime","toLocaleString","timeZone","hour12","Fragment","marginRight","csvData","join","csvContent","blob","Blob","saveAs","successCount","errorCount","handleSaveResponse","length","forEach","t","RefreshToken","marginTop","Table","dataSource","rowKey","ToastContainer","dvdLogo","height","borderRadius","icon","DvdLogo","dvdRef","foodIcons","FaRegLemon","FaCarrot","FaBeer","FaPizzaSlice","FaHamburger","FaIceCream","FaCoffee","RandomIcon","floor","y","xVelocity","yVelocity","animate","logoPosition","getBoundingClientRect","innerWidth","innerHeight","transform","requestAnimationFrame","cancelAnimationFrame","iconColor","i","getRandomColor","ref","background","size","overflow","display","flexDirection","justifyContent","alignItems","servingText","fontSize","fontWeight","fontFamily","margin","customerNumber","NextCustomerPage","currentTicket","setCurrentTicket","fetchNextTicket","incomingData","refreshtoken","refreshToken","currentISO","toISOString","slice","currentTimeMinusThirty","currentTimePlus45Mins","within30Mins","outside30Mins","item","isBetween11And1130","isCurrentTimeBetween11And1130","push","toTimeString","currentHours","getHours","currentMinutes","getMinutes","handleKeyPress","updatedTicket","Audio","wavFile","play","document","removeEventListener","preventDefault","charAt","_regeneratorRuntime","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","desc","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","this","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","result","__await","unwrapped","state","Error","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","return","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","pacificTime","toLocaleTimeString","CreateTicketForm2","_Form$useForm","Form","useForm","form","latestTicket","setLatestTicket","isDialogVisible","setDialogVisible","showTimePicker","setShowTimePicker","fetchLatestTicket","_ref","_asyncToGenerator","_callee","_context","setFieldsValue","t0","apply","arguments","handleDialogOk","onFinish","newData","selectedTime","toDate","currentTimeInRightTimeZone","resetFields","Item","label","rules","required","initialValue","disabled","TextArea","rows","valuePropName","TimePicker","changeOnBlur","format","use12Hours","minuteStep","htmlType","Modal","visible","onCancel","footer","ServingCustomerPage","interval","setInterval","clearInterval","App","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.817be162.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/next.c354ff15.mp3\";","import React, { useEffect, useRef, useState } from 'react';\r\nimport { Table, Button, Input, Checkbox, message } from 'antd';\r\nimport { saveAs } from 'file-saver'; // Import the file-saver library\r\nimport { toast } from 'react-toastify'; // Assuming you're using react-toastify for toast notifications\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nconst TicketList3 = () => {\r\n    const [tickets, setTickets] = useState([]);\r\n    const [sorting, setSorting] = useState({});\r\n    const [sessionId, _] = useState(generateUniqueSessionId());\r\n    const [showDoneItems, setShowDoneItems] = useState(true);\r\n\r\n    // State to track whether the toast is visible\r\n    const isToastVisibleRef = useRef(false);\r\n\r\n\r\n    useEffect(() => {\r\n        const currentTime = new Date();\r\n        console.log(\"TYLER:: time: \", currentTime)\r\n        // Fetch tickets data from the backend\r\n        fetch('http://' + window.location.hostname + ':8888/tickets')\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                console.log(data); // Log the fetched data\r\n                setTickets(data);\r\n\r\n            })\r\n            .catch((error) => console.error('Error fetching tickets:', error));\r\n\r\n        // Set up the SSE connection to listen for updates\r\n        const eventSource = new EventSource('http://' + window.location.hostname + ':8888/sse/tickets');\r\n        // Open a connection to the SSE endpoint\r\n\r\n        eventSource.addEventListener('update', (event) => {\r\n\r\n            try {\r\n                const updateInfo = JSON.parse(event.data);\r\n                // Handle updates and show the toast message\r\n                // You can customize the toast content, appearance, and behavior\r\n                showUpdatedDBToast(updateInfo)\r\n            } catch (error) {\r\n                console.error('Failed to parse JSON data:', error, 'Raw data:', event.data);\r\n                eventSource.close(); \r\n            }\r\n        });\r\n\r\n        return () => {\r\n            eventSource.close(); // Close the SSE connection when the component unmounts\r\n        };\r\n    }, []);\r\n\r\n    function showUpdatedDBToast(updateInfo){\r\n        console.log(\"Recevived call\", updateInfo)\r\n        // Check if the update's session ID matches the current session's ID\r\n\r\n        console.log(\"updateInfo.sessionId\", updateInfo.sessionId)\r\n        console.log(\"sessionId\", sessionId)\r\n        console.log(\"isToastVisibleRef\", isToastVisibleRef)\r\n        if (isToastVisibleRef.current == false && updateInfo.sessionId !== sessionId) {\r\n            console.log(\"Session Id different\")\r\n            isToastVisibleRef.current = true; // Update the ref to true\r\n            console.log(\"isToastVisible: \", isToastVisibleRef)\r\n            const toastId = toast('Database has been updated. Click Here to reload. ', {\r\n                position: \"top-right\",\r\n                autoClose: false,\r\n                closeOnClick: true,\r\n                pauseOnHover: true,\r\n                draggable: true,\r\n                progress: undefined,\r\n                onClick: () => window.location.reload() // Reload the page when the toast is clicked\r\n                // You can add a button to refresh the page\r\n            });\r\n\r\n            // Set up a callback to be called when the toast is dismissed\r\n            toast.onChange(() => {\r\n                if (!toast.isActive(toastId)) {\r\n                    isToastVisibleRef.current = false;\r\n                }\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    function generateUniqueSessionId() {\r\n        const timestamp = new Date().getTime();\r\n        const randomPart = Math.random().toString(36).substr(2, 9);\r\n        var x = `session-${timestamp}-${randomPart}`\r\n        console.log(\"generateUniqueSessionId\", x)\r\n        return `session-${timestamp}-${randomPart}`;\r\n    }\r\n\r\n    const handleSaveClick = (ticketId) => {\r\n        // Find the ticket to be saved from the tickets array\r\n        const ticketToSave = tickets.find((ticket) => ticket.id === ticketId);\r\n\r\n        // Update the ticket data on the backend using the PUT request\r\n        fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Session-Id': sessionId // Include the session ID as a custom header\r\n            },\r\n            body: JSON.stringify(ticketToSave),\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    message.success('Ticket saved successfully!'); // Show success toast message\r\n                } else {\r\n                    message.error('Failed to save ticket. Please try again.'); // Show error toast message\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error updating ticket:', error);\r\n                message.error('An error occurred while saving the ticket. Please try again.'); // Show error toast message\r\n            });\r\n    };\r\n\r\n    const handleDeleteClick = (ticketId) => {\r\n        // Delete the ticket from the backend using the DELETE request\r\n        fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Session-Id': sessionId // Include the session ID as a custom header\r\n            },\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    // If the ticket was deleted successfully, remove it from the frontend state\r\n                    setTickets((prevTickets) => prevTickets.filter((ticket) => ticket.id !== ticketId));\r\n                } else {\r\n                    console.error('Error deleting ticket:', response.statusText);\r\n                }\r\n            })\r\n            .catch((error) => console.error('Error deleting ticket:', error));\r\n    };\r\n\r\n    const handleFieldChange = (ticketId, field, value) => {\r\n        // Update the field value of the ticket in the state\r\n        setTickets((prevTickets) =>\r\n            prevTickets.map((ticket) =>\r\n                ticket.id === ticketId ? { ...ticket, [field]: value } : ticket\r\n            )\r\n        );\r\n    };\r\n\r\n    const sortTickets = (columnKey) => {\r\n        const order = sorting[columnKey] === 'asc' ? 'desc' : 'asc';\r\n        setSorting({ [columnKey]: order });\r\n\r\n        const sortedTickets = [...tickets].sort((a, b) => {\r\n            const aValue = a[columnKey];\r\n            const bValue = b[columnKey];\r\n\r\n            if (typeof aValue === 'string' && typeof bValue === 'string') {\r\n                return order === 'asc' ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue);\r\n            } else {\r\n                // Handle numeric sorting for other data types\r\n                return order === 'asc' ? aValue - bValue : bValue - aValue;\r\n            }\r\n        });\r\n\r\n        setTickets(sortedTickets);\r\n    };\r\n\r\n    const handleExportCsv = () => {\r\n        const csvData = tickets.map((ticket) => {\r\n            return [\r\n                ticket.id,\r\n                ticket.firstName,\r\n                ticket.lastName,\r\n                ticket.scheduleAppointment,\r\n                ticket.scheduleAppointmentTime,\r\n                ticket.firstTimeVisitor,\r\n                ticket.time,\r\n                ticket.positionInLine,\r\n                ticket.additionalNotes,\r\n                ticket.done,\r\n            ].join(',');\r\n        });\r\n\r\n        const csvContent = ['ID,First Name,Last Name,Schedule Appointment,Schedule Appointment Time,First Time Visitor, Sign In Time,Position in Line,Additional Notes,Done'].concat(csvData).join('\\n');\r\n\r\n        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8' });\r\n        saveAs(blob, 'tickets.csv');\r\n    };\r\n\r\n    const sortTicketsByPosition = (columnKey) => {\r\n        const order = sorting[columnKey] === 'asc' ? 'desc' : 'asc';\r\n        setSorting({ [columnKey]: order });\r\n\r\n        const sortedTickets = [...tickets].sort((a, b) => {\r\n            const aValue = a[columnKey];\r\n            const bValue = b[columnKey];\r\n            // Compare numeric values directly\r\n            return order === 'asc' ? aValue - bValue : bValue - aValue;\r\n        });\r\n\r\n        setTickets(sortedTickets);\r\n    };\r\n\r\n    const handleSaveAllClick = () => {\r\n        // Keep track of the number of successful and failed saves\r\n        let successCount = 0;\r\n        let errorCount = 0;\r\n\r\n        // Function to handle individual save response\r\n        const handleSaveResponse = (success) => {\r\n            if (success) {\r\n                successCount += 1;\r\n            } else {\r\n                errorCount += 1;\r\n            }\r\n\r\n            // If we have handled all tickets, display the success or error message\r\n            if (successCount + errorCount === tickets.length) {\r\n                if (errorCount === 0) {\r\n                    message.success('All changes were saved successfully!');\r\n                } else {\r\n                    message.error(`${errorCount} tickets failed to save. Please try again.`);\r\n                }\r\n            }\r\n        };\r\n\r\n        tickets.forEach((ticket) => {\r\n            // Find the ticket to be saved from the tickets array\r\n            const ticketToSave = tickets.find((t) => t.id === ticket.id);\r\n\r\n            // Update the ticket data on the backend using the PUT request\r\n            fetch(`http://${window.location.hostname}:8888/tickets/${ticket.id}`, {\r\n                method: 'PUT',\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                    'X-Session-Id': sessionId // Include the session ID as a custom header\r\n                },\r\n                body: JSON.stringify(ticketToSave),\r\n            })\r\n                .then((response) => {\r\n                    if (response.ok) {\r\n                        handleSaveResponse(true);\r\n                    } else {\r\n                        handleSaveResponse(false);\r\n                    }\r\n                })\r\n                .catch((error) => {\r\n                    console.error('Error updating ticket:', error);\r\n                    handleSaveResponse(false);\r\n                });\r\n        });\r\n    };\r\n    const handleToggleDoneClick = (ticketId) => {\r\n        // Find the ticket to be toggled from the tickets array\r\n        const ticketToToggle = tickets.find((ticket) => ticket.id === ticketId);\r\n    \r\n        // Toggle the \"done\" value\r\n        const updatedDoneValue = !ticketToToggle.done;\r\n        ticketToToggle.done = !ticketToToggle.done;\r\n        // Update the ticket's \"done\" status on the backend using the PUT request\r\n        fetch(`http://${window.location.hostname}:8888/tickets/${ticketId}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'X-Session-Id': sessionId // Include the session ID as a custom header\r\n            },\r\n            body: JSON.stringify(ticketToToggle), // Only send the \"done\" field in the update payload\r\n        })\r\n            .then((response) => {\r\n                if (response.ok) {\r\n                    // Update the \"done\" value in the frontend state\r\n                    handleFieldChange(ticketId, 'done', updatedDoneValue);\r\n                    message.success('Ticket status updated successfully!'); // Show success toast message\r\n                } else {\r\n                    message.error('Failed to update ticket status. Please try again.'); // Show error toast message\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error updating ticket status:', error);\r\n                message.error('An error occurred while updating the ticket status. Please try again.'); // Show error toast message\r\n            });\r\n    };\r\n    \r\n\r\n    const columns = [\r\n        {\r\n            title: 'ID',\r\n            dataIndex: 'id',\r\n            key: 'id',\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTickets('id'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'First Name',\r\n            dataIndex: 'firstName',\r\n            key: 'firstName',\r\n            render: (text, record) => (\r\n                <Input\r\n                    value={record.firstName}\r\n                    onChange={(e) => handleFieldChange(record.id, 'firstName', e.target.value)}\r\n                />\r\n            ),\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTickets('firstName'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'Last Name',\r\n            dataIndex: 'lastName',\r\n            key: 'lastName',\r\n            render: (text, record) => (\r\n                <Input\r\n                    value={record.lastName}\r\n                    onChange={(e) => handleFieldChange(record.id, 'lastName', e.target.value)}\r\n                />\r\n            ),\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTickets('lastName'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'Schedule Appointment',\r\n            dataIndex: 'scheduleAppointment',\r\n            key: 'scheduleAppointment',\r\n            render: (text, record) => (\r\n                <Checkbox\r\n                    checked={record.scheduleAppointment}\r\n                    onChange={(e) => handleFieldChange(record.id, 'scheduleAppointment', e.target.checked)}\r\n                />\r\n            ),\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTickets('scheduleAppointment'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'First Time Visitor',\r\n            dataIndex: 'firstTimeVisitor',\r\n            key: 'firstTimeVisitor',\r\n            render: (text, record) => (\r\n                <Checkbox\r\n                    checked={record.firstTimeVisitor}\r\n                    onChange={(e) => handleFieldChange(record.id, 'firstTimeVisitor', e.target.checked)}\r\n                />\r\n            ),\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTickets('firstTimeVisitor'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'Sign In Time',\r\n            dataIndex: 'time',\r\n            key: 'time',\r\n            render: (text, record) => (\r\n                <span>{ getDateInPacTime(record.time)}</span>\r\n            ),\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTickets('time'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'Schedule Appointment Time',\r\n            dataIndex: 'scheduleAppointmentTime',\r\n            key: 'scheduleAppointmentTime',\r\n            render: (text, record) => (\r\n                <span>\r\n                    {record.scheduleAppointmentTime\r\n                        ? getDateInPacTime(record.scheduleAppointmentTime)\r\n                        : 'N/A'}\r\n                </span>\r\n            ),\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTickets('scheduleAppointmentTime'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'Position in Line',\r\n            dataIndex: 'positionInLine',\r\n            key: 'positionInLine',\r\n            render: (text, record) => (\r\n                <Input\r\n                    type=\"number\"\r\n                    value={record.positionInLine}\r\n                    onChange={(e) => handleFieldChange(record.id, 'positionInLine', parseInt(e.target.value))}\r\n                />\r\n            ),\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTicketsByPosition('positionInLine'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'Additional Notes',\r\n            dataIndex: 'additionalNotes',\r\n            key: 'additionalNotes',\r\n            render: (text, record) => (\r\n                <textarea\r\n                    value={record.additionalNotes}\r\n                    onChange={(e) => handleFieldChange(record.id, 'additionalNotes', e.target.value)}\r\n                    style={{ width: '100%', minHeight: 100 }}\r\n                />\r\n            ),\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTickets('additionalNotes'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'Done',\r\n            dataIndex: 'done',\r\n            key: 'done',\r\n            render: (text, record) => (\r\n                <Button \r\n                onClick={() => handleToggleDoneClick(record.id)}\r\n                style={{\r\n                    backgroundColor: record.done ? 'green' : 'red',\r\n                    color: 'white',\r\n                }}\r\n                >{record.done ? 'Done' : 'Not Done'}</Button>\r\n            ),\r\n            onHeaderCell: () => ({\r\n                onClick: () => sortTickets('done'),\r\n            }),\r\n        },\r\n        {\r\n            title: 'Save',\r\n            key: 'save',\r\n            render: (text, record) => (\r\n                <Button onClick={() => handleSaveClick(record.id)}>Save</Button>\r\n            ),\r\n        },\r\n        {\r\n            title: 'Delete',\r\n            key: 'delete',\r\n            render: (text, record) => (\r\n                <Button onClick={() => handleDeleteClick(record.id)}>Delete</Button>\r\n            ),\r\n        },\r\n    ];\r\n\r\n      const handleRefreshClick = () => {\r\n    // Send a request to the backend with the \"RefreshToken\" header\r\n    fetch('http://${window.location.hostname}:8888/refresh', {\r\n      method: 'GET',\r\n      headers: {\r\n        'RefreshToken': 'refreshToken', // Replace with your actual refresh token\r\n      },\r\n    })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        // do nothing\r\n      })\r\n      .catch(error => {\r\n        console.error('Error refreshing data:', error);\r\n      });\r\n  };\r\n\r\n    const currentimeTest = () => {\r\n        let currentTime = new Date();\r\n        return<>{currentTime.toISOString()}</>\r\n    }\r\n\r\n    const getDateInPacTime = (newDate) => {\r\n      let dateStr = newDate + \"Z\"; // Adding 'Z' to indicate it's UTC\r\n      const dateObj = new Date(dateStr);\r\n      const pacificDateTime = dateObj.toLocaleString('en-US', { timeZone: 'America/Los_Angeles', hour12: true });\r\n\r\n    return <>{pacificDateTime}</>;\r\n    };\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            \r\n            <h2 style={styles.title}>Ticketing System Administrator Mode</h2>\r\n            <div style={styles.buttonsTopLeft}>\r\n                <Button style={{ marginRight: '15px' }} type=\"primary\" onClick={handleExportCsv}>Export Data As CSV</Button>\r\n                <Button style={{ marginRight: '15px' }}type=\"primary\" onClick={handleSaveAllClick}>Save All Changes</Button>\r\n                <Button type=\"primary\" onClick={handleRefreshClick}>Refresh Serving Customer Page</Button>\r\n\r\n                <div style={{ marginTop: '10px' }}>\r\n                    <Checkbox checked={showDoneItems} onChange={() => setShowDoneItems(!showDoneItems)}>\r\n                        Show Done Items\r\n                    </Checkbox>\r\n                </div>\r\n            </div>\r\n            <Table\r\n                dataSource={tickets.filter(ticket => (showDoneItems || !ticket.done))}\r\n                columns={columns}\r\n                rowKey=\"id\"\r\n            />\r\n            {/* {currentimeTest()} */}\r\n            <ToastContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nconst styles = {\r\n    container: {\r\n        padding: '90px'\r\n    },\r\n    title: {\r\n        textAlign: 'center'\r\n    },\r\n    buttonsTopLeft: {\r\n        position: 'absolute',\r\n        top: '30px', // Adjust the top position\r\n        left: '30px', // Adjust the left position\r\n    },\r\n};\r\n\r\nexport default TicketList3;\r\n","import React, { useEffect, useRef } from 'react';\r\nimport {FaRegLemon, FaCarrot, FaBeer, FaPizzaSlice, FaHamburger, FaIceCream, FaCoffee } from 'react-icons/fa';\r\n\r\nconst DvdLogo = () => {\r\n  const dvdRef = useRef(null);\r\n\r\n  const foodIcons = [FaRegLemon, FaCarrot, FaBeer, FaPizzaSlice, FaHamburger, FaIceCream, FaCoffee];\r\n  const randomIconIndex = Math.floor(Math.random() * foodIcons.length);\r\n  const RandomIcon = foodIcons[randomIconIndex];\r\n\r\n  const getRandomColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let color = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const dvdLogo = dvdRef.current;\r\n\r\n    let x = 0;\r\n    let y = 0;\r\n    let xVelocity = 3;\r\n    let yVelocity = 3;\r\n\r\n    const animate = () => {\r\n      const logoPosition = dvdLogo.getBoundingClientRect();\r\n\r\n      x += xVelocity;\r\n      y += yVelocity;\r\n\r\n      if (x + logoPosition.width >= window.innerWidth - 3 || x <= 0) {\r\n        xVelocity = -xVelocity;\r\n      }\r\n      if (y + logoPosition.height >= window.innerHeight - 3 || y <= 0) {\r\n        yVelocity = -yVelocity;\r\n      }\r\n\r\n      dvdLogo.style.transform = `translate(${x}px, ${y}px)`;\r\n\r\n      requestAnimationFrame(animate);\r\n    };\r\n\r\n    animate();\r\n\r\n    return () => {\r\n      cancelAnimationFrame(animate);\r\n    };\r\n  }, []);\r\n\r\n  const iconColor = getRandomColor();\r\n\r\n  return (\r\n    <div ref={dvdRef} style={{ ...styles.dvdLogo, background: iconColor }}>\r\n      <RandomIcon size={80} style={styles.icon} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  dvdLogo: {\r\n    padding: '20px',\r\n    position: 'absolute',\r\n    width: '80px',\r\n    height: '80px',\r\n    borderRadius: '50%',\r\n  },\r\n  icon: {\r\n    color: 'white',\r\n  },\r\n};\r\n\r\nexport default DvdLogo;\r\n","// NextCustomerPage.js\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport DvdLogo from './FoodIcon';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport wavFile from './next.mp3';\r\n\r\nconst NextCustomerPage = () => {\r\n  // Assuming you have the customer number stored in a variable\r\n  // const [data, setData] = useState([]);\r\n  const [currentTicket, setCurrentTicket] = useState(null);\r\n  const [sessionId, setSessionId] = useState(generateUniqueSessionId());\r\n  const isToastVisibleRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the endpoint\r\n    fetchNextTicket()\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    // Fetch data from the endpoint\r\n    console.log(\"creating SSE\")\r\n    // Set up the SSE connection to listen for updates\r\n    const eventSource = new EventSource('http://' + window.location.hostname + ':8888/sse/tickets');\r\n    // Open a connection to the SSE endpoint\r\n\r\n    eventSource.addEventListener('refresh', (event) => {\r\n      try {\r\n        const incomingData = JSON.parse(event.data);\r\n        console.log(\"Refresh Heard\", incomingData);\r\n        console.log(\" incomingData.refreshToken\",   incomingData.refreshtoken);\r\n        console.log(\" incomingData.refreshToken == 'refreshToken'\",   incomingData.refreshtoken == 'refreshToken');\r\n\r\n        if(incomingData && incomingData.refreshtoken == 'refreshToken'){\r\n          console.log(\"should refresh bc ncomingData.refreshToken: \", incomingData.refreshToken);\r\n          window.location.reload();\r\n        }\r\n      } catch (error) {\r\n        console.error('Failed to parse JSON data:', error, 'Raw data:', event.data);\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      eventSource.close(); // Close the SSE connection when the component unmounts\r\n    };\r\n  }, []);\r\n\r\n  function generateUniqueSessionId() {\r\n    const timestamp = new Date().getTime();\r\n    const randomPart = Math.random().toString(36).substr(2, 9);\r\n    var x = `session-${timestamp}-${randomPart}`\r\n    console.log(\"generateUniqueSessionId\", x)\r\n    return `session-${timestamp}-${randomPart}`;\r\n  }\r\n\r\n  const fetchNextTicket = () => {\r\n    fetch('http://' + window.location.hostname + ':8888/tickets/not-done-from-last-12-hours')\r\n      .then(response => response.json())\r\n      .then(incomingData => {\r\n        const currentISO = new Date().toISOString().slice(0, 16); // Current time\r\n        let currentTime = new Date(currentISO);\r\n        let currentTimeMinusThirty = new Date(currentTime.getTime() - 30 * 60 * 1000);\r\n\r\n        let currentTimePlus45Mins = new Date(currentTime.getTime() + 45 * 60 * 1000);\r\n\r\n        // Separate data into two arrays based on scheduleAppointmentTime\r\n        const within30Mins = [];\r\n        const outside30Mins = [];\r\n        incomingData.forEach(item => {\r\n          // Insert code to also check if time is 11 to 1130 \r\n          // and then check if we have appointments from within the next 30 minutes ? \r\n          const isBetween11And1130 = isCurrentTimeBetween11And1130();\r\n          console.log(`TYLER:: DEBUG\r\n          isBetween11And1130: ${isBetween11And1130}\r\n          item.scheduleAppointmentTime: ${item.scheduleAppointmentTime} \r\n          new Date(item.scheduleAppointmentTime): ${new Date(item.scheduleAppointmentTime)} \r\n          currentTimePlusThirty: ${currentTimePlus45Mins}\r\n          currentTimePlusOneHour: ${currentTimePlus45Mins}\r\n          `)\r\n\r\n          if (\r\n            isBetween11And1130 && item.scheduleAppointmentTime &&\r\n            new Date(item.scheduleAppointmentTime) >= currentTime &&\r\n            new Date(item.scheduleAppointmentTime) < currentTimePlus45Mins\r\n          ) {\r\n            console.log(\"TYLER :: SPECIAL CASE isBetween11And1130\", item)\r\n\r\n            within30Mins.push(item);\r\n          }\r\n          else if (\r\n            item.scheduleAppointmentTime &&\r\n            new Date(item.scheduleAppointmentTime) >=\r\n            currentTimeMinusThirty &&\r\n            new Date(item.scheduleAppointmentTime) <=\r\n            currentTime\r\n          ) {\r\n            console.log(\"TYLER:: Within 30\")\r\n            console.log(\"TYLER:: Schedule Time\", new Date(item.scheduleAppointmentTime))\r\n            console.log(\"TYLER:: Current time - 30\", new Date(currentTimeMinusThirty.getTime() - 30 * 60 * 1000))\r\n            within30Mins.push(item);\r\n          } else {\r\n            console.log(\"TYLER:: Outside 30\")\r\n            console.log(\"TYLER:: new Date(item.scheduleAppointmentTime)\", new Date(item.scheduleAppointmentTime))\r\n            console.log(\"TYLER:: new Date(currentTime.getTime() - 30 * 60 * 1000)\", new Date(currentTime.getTime() - 30 * 60 * 1000))\r\n            outside30Mins.push(item);\r\n          }\r\n        });\r\n\r\n        // Sort within30Mins array based on scheduleAppointmentTime\r\n        within30Mins.sort(\r\n          (a, b) =>\r\n            new Date(a.scheduleAppointmentTime) -\r\n            new Date(b.scheduleAppointmentTime)\r\n        );\r\n\r\n        console.log(\"Within 30 mins:\")\r\n\r\n        within30Mins.map(item => (\r\n          console.log(\"Tyler:\", item)\r\n        ))\r\n\r\n        outside30Mins.sort((a, b) => a.positionInLine - b.positionInLine);\r\n\r\n        console.log(\"Outsite 30 mins:\")\r\n\r\n        outside30Mins.map(item => (\r\n          console.log(\"Tyler:\", item)\r\n        ))\r\n\r\n        console.log(\"within30Mins[0]\", within30Mins)\r\n\r\n        if (within30Mins.length !== 0) {\r\n          console.log(\"within30Mins[0]\", within30Mins[0])\r\n          setCurrentTicket(within30Mins[0]);\r\n        } else if (outside30Mins.length !== 0) {\r\n          console.log(\"outside30Min\", outside30Mins)\r\n          setCurrentTicket(outside30Mins[0]);\r\n        } else {\r\n          setCurrentTicket(null)\r\n        }\r\n\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching data:', error);\r\n      });\r\n  };\r\n\r\n    const handleTap = (e) => {\r\n      e.preventDefault();\r\n      if (currentTicket) {\r\n        console.log(\"number tapped pressed\")\r\n        const updatedTicket = { ...currentTicket, done: true };\r\n        // Update the ticket data on the backend using the PUT request\r\n        fetch(`http://${window.location.hostname}:8888/tickets/${currentTicket.id}`, {\r\n          method: 'PUT',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'X-Session-Id': sessionId // Include the session ID as a custom header\r\n          },\r\n          body: JSON.stringify(updatedTicket),\r\n        })\r\n          .then((response) => response.json())\r\n          .then(() => {\r\n            fetchNextTicket(); // Fetch the next ticket after updating the current one\r\n            const audio = new Audio(wavFile);\r\n            audio.play();\r\n          })\r\n          .catch((error) => console.error('Error updating ticket:', error));\r\n      }\r\n    };\r\n\r\n  const isCurrentTimeBetween11And1130 = () => {\r\n    // Create a Date object for the current time\r\n    var currentTime = new Date();\r\n\r\n    console.log(\"currentTime\", currentTime.toTimeString())\r\n\r\n    // Get the current hours and minutes\r\n    var currentHours = currentTime.getHours();\r\n    var currentMinutes = currentTime.getMinutes();\r\n\r\n    // Define the start and end times for the range (11:00 AM to 11:30 AM)\r\n    var startTimeHours = 11;\r\n    var startTimeMinutes = 0;\r\n    var endTimeHours = 11;\r\n    var endTimeMinutes = 30;\r\n\r\n    // Compare the current time with the desired range\r\n    if (\r\n      (currentHours > startTimeHours || (currentHours === startTimeHours && currentMinutes >= startTimeMinutes)) &&\r\n      (currentHours < endTimeHours || (currentHours === endTimeHours && currentMinutes <= endTimeMinutes))\r\n    ) {\r\n      console.log(\"currentTime is between 11 and 1130\")\r\n      return true;\r\n    } else {\r\n      console.log(\"currentTime is NOT between 11 and 1130\")\r\n      return false\r\n    }\r\n  }\r\n  // useEffect(() => {\r\n\r\n  //   // Set up the SSE connection to listen for updates\r\n  //   const eventSource = new EventSource('http://' + window.location.hostname + ':8888/sse/tickets');\r\n  //   // Open a connection to the SSE endpoint\r\n\r\n  //   eventSource.addEventListener('update', (event) => {\r\n\r\n  //     try {\r\n  //       const updateInfo = JSON.parse(event.data);\r\n  //       // Handle updates and show the toast message\r\n  //       // You can customize the toast content, appearance, and behavior\r\n  //       console.log(\"Recevived call\", updateInfo)\r\n  //       // Check if the update's session ID matches the current session's ID\r\n\r\n  //       console.log(\"updateInfo.sessionId\", updateInfo.sessionId)\r\n  //       console.log(\"sessionId\", sessionId)\r\n  //       console.log(\"isToastVisibleRef\", isToastVisibleRef)\r\n\r\n  //       if (isToastVisibleRef.current == false && updateInfo.sessionId !== sessionId) {\r\n  //         window.location.reload()\r\n  //       }\r\n\r\n  //       // if (isToastVisibleRef.current == false && updateInfo.sessionId !== sessionId) {\r\n  //       //     console.log(\"Session Id different\")\r\n  //       //     isToastVisibleRef.current = true; // Update the ref to true\r\n  //       //     console.log(\"isToastVisible: \", isToastVisibleRef)\r\n  //       //     const toastId = toast('Database has been updated. Click Here to reload. ', {\r\n  //       //         position: \"top-right\",\r\n  //       //         autoClose: false,\r\n  //       //         closeOnClick: true,\r\n  //       //         pauseOnHover: true,\r\n  //       //         draggable: true,\r\n  //       //         progress: undefined,\r\n  //       //         onClick: () => window.location.reload() // Reload the page when the toast is clicked\r\n  //       //         // You can add a button to refresh the page\r\n  //       //     });\r\n\r\n  //       //     // Set up a callback to be called when the toast is dismissed\r\n  //       //     toast.onChange(() => {\r\n  //       //         if (!toast.isActive(toastId)) {\r\n  //       //             isToastVisibleRef.current = false;\r\n  //       //         }\r\n  //       //     });\r\n\r\n  //       // }\r\n  //     } catch (error) {\r\n  //       console.error('Failed to parse JSON data:', error, 'Raw data:', event.data);\r\n  //     }\r\n  //   });\r\n\r\n  //   return () => {\r\n  //     eventSource.close(); // Close the SSE connection when the component unmounts\r\n  //   };\r\n  // }, []);\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (event) => {\r\n      if (event.key === ' ') {\r\n        if (currentTicket) {\r\n          console.log(\"space pressed\")\r\n          const updatedTicket = { ...currentTicket, done: true };\r\n          // Update the ticket data on the backend using the PUT request\r\n          fetch(`http://${window.location.hostname}:8888/tickets/${currentTicket.id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'X-Session-Id': sessionId // Include the session ID as a custom header\r\n            },\r\n            body: JSON.stringify(updatedTicket),\r\n          })\r\n            .then((response) => response.json())\r\n            .then(() => {\r\n              fetchNextTicket(); // Fetch the next ticket after updating the current one\r\n              const audio = new Audio(wavFile);\r\n              audio.play();\r\n            })\r\n            .catch((error) => console.error('Error updating ticket:', error));\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keypress', handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener('keypress', handleKeyPress);\r\n    };\r\n  }, [currentTicket]);\r\n\r\n  return (\r\n    <div>\r\n      {/* <div>\r\n        Current Time: {new Date().toISOString()}\r\n\r\n      </div> */}\r\n            <DvdLogo />\r\n\r\n      <div style={styles.container}>\r\n        {console.log(\"Serving Customers!\")}\r\n        <h2 style={styles.servingText}>Serving Customer Number</h2>\r\n        <h1 onClick={handleTap} style={styles.customerNumber}>{(currentTicket != null && currentTicket.positionInLine != null) ? currentTicket.positionInLine : \"☺️\"}</h1>\r\n        {currentTicket && currentTicket.firstName != null && (\r\n          <h2 style={styles.positionInLine}>You are up: {currentTicket.firstName} {currentTicket.lastName.charAt(0)}.</h2>\r\n        )}\r\n      </div>\r\n      <ToastContainer />\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    overflow: 'hidden',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    background: '#f0f0f0', // Light gray background\r\n  },\r\n  servingText: {\r\n    fontSize: '24px',\r\n    fontWeight: 'bold',\r\n    fontFamily: 'Helvetica, Arial, sans-serif', // Apple-like font\r\n    color: '#333', // Dark gray text color\r\n    margin: 0, // Remove margin between elements\r\n  },\r\n  customerNumber: {\r\n    fontSize: '448px', // Larger font size for the number\r\n    fontWeight: 'bold',\r\n    fontFamily: 'Helvetica, Arial, sans-serif', // Apple-like font\r\n    color: '#333', // Dark gray text color\r\n    margin: 0, // Remove margin between elements\r\n  },\r\n};\r\n\r\nexport default NextCustomerPage;","import React, { useState, useEffect } from \"react\";\r\nimport { Form, Input, Checkbox, Button, Modal, TimePicker } from \"antd\"; // Import TimePicker\r\nimport dayjs from \"dayjs\";\r\nimport locale from \"dayjs/locale/en\";\r\nimport moment from \"moment-timezone\";\r\n\r\nconst CreateTicketForm2 = () => {\r\n  const [form] = Form.useForm();\r\n  const [latestTicket, setLatestTicket] = useState(null);\r\n  const [isDialogVisible, setDialogVisible] = useState(false); // State to manage dialog visibility\r\n  const [showTimePicker, setShowTimePicker] = useState(false); // State for showing TimePicker\r\n  const [defaultTime, setDefaultTime] = useState(new Date());\r\n\r\n  const fetchLatestTicket = async () => {\r\n    try {\r\n      const response = await fetch(\r\n        \"http://\" + window.location.hostname + \":8888/tickets/latest\"\r\n      );\r\n      // const response = await fetch('http://localhost:8888/tickets/latest');\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        setLatestTicket(data);\r\n        console.log(\"latest ticket\", data);\r\n\r\n        form.setFieldsValue({\r\n          positionInLine: data.positionInLine + 1,\r\n        });\r\n      } else {\r\n        console.error(\"Error fetching latest ticket:\", response.statusText);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching latest ticket:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Fetch tickets data from the backend\r\n    fetch(\"http://\" + window.location.hostname + \":8888/tickets\")\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data); // Log the fetched data\r\n      })\r\n      .catch((error) => console.error(\"Error fetching tickets:\", error));\r\n    fetchLatestTicket();\r\n  }, [form]);\r\n\r\n  const handleDialogOk = () => {\r\n    setDialogVisible(false);\r\n  };\r\n\r\n  const handleSubmit = (values) => {\r\n    // Create a new ticket with the current time\r\n    const currentTime = new Date().toLocaleTimeString;\r\n\r\n    // Get the selected time from TimePicker\r\n    console.log(\"values.scheduleAppointment: \", values.scheduleAppointment);\r\n\r\n    var newData = {\r\n      ...values,\r\n      done: false, // Set \"done\" to false before sending to the backend\r\n      time: currentTime,\r\n    };\r\n\r\n    if (values.scheduleAppointment) {\r\n      const selectedTime = values.scheduleAppointmentTime\r\n        .toDate()\r\n        .toISOString()\r\n        .slice(0, 16);\r\n      const currentTimeInRightTimeZone = new Date(selectedTime);\r\n\r\n      console.log(\"selectedTime: \", selectedTime);\r\n      console.log(\r\n        \"currentTimeInRightTimeZone: \",\r\n        currentTimeInRightTimeZone.toLocaleTimeString()\r\n      );\r\n      console.log(\r\n        \"values.scheduleAppointmentTime: \",\r\n        values.scheduleAppointmentTime\r\n      );\r\n      newData = {\r\n        ...values,\r\n        done: false, // Set \"done\" to false before sending to the backend\r\n        time: currentTime,\r\n        scheduleAppointmentTime: selectedTime,\r\n      };\r\n    }\r\n\r\n    fetch(\"http://\" + window.location.hostname + \":8888/tickets\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(newData),\r\n    })\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Fetch tickets data again to get the total number of tickets (including the newly created one)\r\n        fetch(\"http://\" + window.location.hostname + \":8888/tickets\")\r\n          .then((response) => response.json())\r\n          .then((data) => {\r\n            // Update the positionInLine to the next position in line\r\n            fetchLatestTicket();\r\n            // Show the dialog\r\n            setDialogVisible(true);\r\n            //Reset the form fields after successful submission\r\n            form.resetFields();\r\n            // Hide Appointment time picker\r\n            setShowTimePicker(false);\r\n          })\r\n          .catch((error) => console.error(\"Error fetching tickets:\", error));\r\n      })\r\n      .catch((error) => console.error(\"Error creating ticket:\", error));\r\n  };\r\n\r\n  return (\r\n    <div style={styles.container}>\r\n      <h2>Please Sign In:</h2>\r\n      <br />\r\n      <Form form={form} onFinish={handleSubmit}>\r\n        <Form.Item\r\n          label=\"First Name\"\r\n          name=\"firstName\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n        <Form.Item\r\n          label=\"Last Name\"\r\n          name=\"lastName\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Position in Line\"\r\n          initialValue={\r\n            latestTicket && latestTicket.positionInLine\r\n              ? latestTicket.positionInLine + 1\r\n              : \"1\"\r\n          }\r\n          name=\"positionInLine\"\r\n        >\r\n          <Input type=\"number\" disabled />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          label=\"Additional Notes\"\r\n          initialValue={\"\"}\r\n          name=\"additionalNotes\"\r\n          rules={[{ required: false }]}\r\n        >\r\n          <Input.TextArea rows={4} />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"firstTimeVisitor\"\r\n          valuePropName=\"checked\"\r\n          initialValue={0}\r\n        >\r\n          <Checkbox>First Time Visitor</Checkbox>\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"scheduleAppointment\"\r\n          valuePropName=\"checked\"\r\n          initialValue={false}\r\n        >\r\n          <Checkbox\r\n            onChange={(e) => {\r\n              setShowTimePicker(e.target.checked);\r\n            }}\r\n          >\r\n            Schedule Appointment\r\n          </Checkbox>\r\n        </Form.Item>\r\n\r\n        {showTimePicker && (\r\n          <Form.Item\r\n            label=\"Schedule Appointment Time:\"\r\n            name=\"scheduleAppointmentTime\"\r\n            rules={[\r\n              {\r\n                required: true,\r\n                message: \"Please select a schedule appointment time\",\r\n              },\r\n            ]}\r\n          >\r\n            <TimePicker\r\n              // defaultValue={dayjs(`${defaultTime.getHours()}:00:00`, \"HH:mm:ss\")}\r\n              changeOnBlur={true}\r\n              format=\"hh:mm A\"\r\n              use12Hours\r\n              minuteStep={30}\r\n            />\r\n          </Form.Item>\r\n        )}\r\n\r\n        <Form.Item>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            Create Ticket\r\n          </Button>\r\n        </Form.Item>\r\n      </Form>\r\n\r\n      {\r\n        <Modal\r\n          visible={isDialogVisible}\r\n          title={`Please take a seat`}\r\n          //+ (latestTicket != null  && latestTicket.firstName != null) ? latestTicket.firstName : ''\r\n          onCancel={handleDialogOk}\r\n          footer={[\r\n            <Button\r\n              key=\"Ok\"\r\n              type=\"primary\"\r\n              onClick={() => {\r\n                handleDialogOk();\r\n              }}\r\n            >\r\n              Ok\r\n            </Button>,\r\n          ]}\r\n        >\r\n          <p>\r\n            {latestTicket ? latestTicket.firstName : \"\"}{\" \"}\r\n            {latestTicket ? latestTicket.lastName : \"\"}{\" \"}\r\n          </p>\r\n\r\n          {latestTicket != null &&\r\n            console.log(\r\n              \"Original Time for:\",\r\n              latestTicket.scheduleAppointmentTime\r\n            )}\r\n          <p>\r\n            {latestTicket && latestTicket.scheduleAppointment\r\n              ? getDateInPacTime(latestTicket.scheduleAppointmentTime.toString())\r\n              : \"\"}\r\n          </p>\r\n          <p>#{latestTicket ? latestTicket.positionInLine : \"\"}</p>\r\n        </Modal>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nconst getDateInPacTime = (newDate) => {\r\n  let dateStr = newDate + \"Z\"; // Adding 'Z' to indicate it's UTC\r\n  const dateObj = new Date(dateStr);\r\n  const pacificTime = dateObj.toLocaleTimeString(\"en-US\", {\r\n    timeZone: \"America/Los_Angeles\",\r\n    hour12: true,\r\n  });\r\nreturn <>{pacificTime}</>;\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    padding: \"30px\",\r\n  },\r\n};\r\n\r\nexport default CreateTicketForm2;\r\n","// ServingCustomerPage.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport DvdLogo from './FoodIcon';\r\n\r\nconst ServingCustomerPage = () => {\r\n  // Assuming you have the customer number stored in a variable\r\n  const [currentTicket, setCurrentTicket] = useState(null);\r\n\r\n  const fetchNextTicket = () => {\r\n    fetch('http://'+ window.location.hostname +':8888/tickets/nextInLine')\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        setCurrentTicket(data);\r\n      })\r\n      .catch((error) => console.error('Error fetching next ticket:', error));\r\n  };\r\n  useEffect(() => {\r\n    // Initial fetch of the next ticket\r\n    fetchNextTicket();\r\n\r\n    // Set up interval to fetch new ticket every 1 second\r\n    const interval = setInterval(fetchNextTicket, 1000);\r\n\r\n    // Clean up interval on unmount\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n\r\n  useEffect(() => {\r\n    const handleKeyPress = (event) => {\r\n      if (event.key === ' ') {\r\n        if (currentTicket) {\r\n          console.log(\"space pressed\")\r\n          const updatedTicket = { ...currentTicket, done: true };\r\n          // Update the ticket data on the backend using the PUT request\r\n          fetch(`http://${window.location.hostname}:8888/tickets/${currentTicket.id}`, {\r\n            method: 'PUT',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(updatedTicket),\r\n          })\r\n            .then((response) => response.json())\r\n            .then(() => {\r\n              fetchNextTicket(); // Fetch the next ticket after updating the current one\r\n            })\r\n            .catch((error) => console.error('Error updating ticket:', error));\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keypress', handleKeyPress);\r\n\r\n    return () => {\r\n      document.removeEventListener('keypress', handleKeyPress);\r\n    };\r\n  }, [currentTicket]);\r\n\r\n\r\n\r\n  return (\r\n    <div>\r\n      <DvdLogo />\r\n      <div style={styles.container}>\r\n        {console.log(\"Serving Customers!\")}\r\n        <h2 style={styles.servingText}>Serving Customer Number</h2>\r\n        <h1 style={styles.customerNumber}>{(currentTicket != null && currentTicket.positionInLine !=null) ? currentTicket.positionInLine : \"☺️\"}</h1>\r\n        {currentTicket && currentTicket.firstName != null && (\r\n          <h2 style={styles.positionInLine}>You are up: {currentTicket.firstName}</h2>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst styles = {\r\n  container: {\r\n    overflow: 'hidden',\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    height: '100vh',\r\n    background: '#f0f0f0', // Light gray background\r\n  },\r\n  servingText: {\r\n    fontSize: '24px',\r\n    fontWeight: 'bold',\r\n    fontFamily: 'Helvetica, Arial, sans-serif', // Apple-like font\r\n    color: '#333', // Dark gray text color\r\n    margin: 0, // Remove margin between elements\r\n  },\r\n  customerNumber: {\r\n    fontSize: '448px', // Larger font size for the number\r\n    fontWeight: 'bold',\r\n    fontFamily: 'Helvetica, Arial, sans-serif', // Apple-like font\r\n    color: '#333', // Dark gray text color\r\n    margin: 0, // Remove margin between elements\r\n  },\r\n};\r\n\r\nexport default ServingCustomerPage;","// App.js\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom'; // Change this line\r\n\r\nimport TicketList3 from './TicketList3';\r\nimport NextCustomerPage from './NextCustomerPage';\r\nimport CreateTicketForm2 from './CreateTicketForm2';\r\nimport ServingCustomerPage from './ServingCustomerPage';\r\n\r\nconst App = () => {\r\n  return (\r\n    <Router>\r\n      <Routes>\r\n        {/* Add your existing routes */}\r\n        {/* <Route path=\"/\" element={<TicketList3/>} /> */}\r\n        <Route path=\"/admin22\" element={<TicketList3/>} />\r\n\r\n        {/* <Route path=\"/createTicket\" element={<CreateTicketForm />} /> */}\r\n        <Route path=\"/ticket\" element={<CreateTicketForm2 />} />\r\n\r\n        {/* New route for the \"Serving Customer\" page */}\r\n        <Route path=\"/servingCustomer\" element={<ServingCustomerPage/>} />\r\n        <Route path=\"/\" element={<NextCustomerPage />} />\r\n      </Routes>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}